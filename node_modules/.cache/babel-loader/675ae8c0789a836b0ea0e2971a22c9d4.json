{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/speedline/proto/src/App.js\";\nimport React from 'react';\nimport GoogleMap from 'google-map-react';\nimport CityInfo from './CityInfo';\nimport axios from 'axios';\nimport DetailedWeather from './DetailedWeather';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      center: {},\n      stores: [],\n      showInfo: false,\n      activeStore: {}\n    };\n\n    this.handleClick = (ev, store) => {\n      //const city = ev.target.parentElement.querySelector('.cityName').innerHTML;\n      this.setState({\n        currentStore: store,\n        showInfo: true\n      });\n    };\n  }\n\n  getCenter() {\n    const stores = this.state.stores;\n    var maxLat = 0;\n    var minLat = 100;\n    var maxLong = 0;\n    var minLong = 100;\n\n    for (let i = 0; i < stores.length; i++) {\n      if (stores[i].coords.lat > maxLat) {\n        maxLat = stores[i].coords.lat;\n      } else if (stores[i].coords.lat < minLat) {\n        minLat = stores[i].coords.lat;\n      }\n\n      if (stores[i].coords.lng > maxLong) {\n        maxLong = stores[i].coords.lng;\n      } else if (stores[i].coords.lng < minLong) {\n        minLong = stores[i].coords.lng;\n      }\n    }\n\n    var latitude = (maxLat + minLat) / 2.0;\n    var longitude = (maxLong + minLong) / 2.0;\n    this.setState({\n      center: {\n        lat: latitude,\n        lng: longitude\n      }\n    });\n  }\n\n  componentDidMount() {\n    axios.get(\"http://api.openweathermap.org/data/2.5/group\", {\n      params: {\n        units: \"metric\",\n        id: \"6113365,5932311,6180144,5936286,5955902,6162949,6121621\",\n        appid: \"d768b86ac2b5b13b09964365eb5f0128\"\n      }\n    }).then(response => {\n      var data = response.data.list;\n      const cityWeathers = data.map(city => {\n        return {\n          name: city.name,\n          temp: city.main.temp,\n          coords: {\n            lat: city.coord.lat,\n            lng: city.coord.lon\n          },\n          tempMin: city.main.temp_min,\n          tempMax: city.main.temp_max,\n          pressure: city.main.pressure,\n          humidity: city.main.humidity,\n          description: city.weather[0].description,\n          windSpeed: city.wind.speed,\n          icon: \"http://openweathermap.org/img/wn/\" + city.weather[0].icon + \".png\"\n        };\n      });\n      this.setState({\n        stores: cityWeathers\n      });\n      this.getCenter();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMap, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'\n      },\n      defaultCenter: {\n        lat: 54.0562,\n        lng: -124.7414\n      },\n      defaultZoom: 5.4,\n      center: {\n        lat: this.state.center.lat,\n        lng: this.state.center.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 8\n      }\n    }, this.state.stores.map((store, index) => {\n      const latitude = store.coords.lat;\n      return /*#__PURE__*/React.createElement(CityInfo, {\n        key: index,\n        lat: Math.ceil(latitude),\n        lng: Math.floor(store.coords.lng),\n        store: store,\n        cn: latitude > this.state.center.lat ? 'dropdown' : 'dropup',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }\n      });\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/speedline/proto/src/App.js"],"names":["React","GoogleMap","CityInfo","axios","DetailedWeather","App","Component","state","center","stores","showInfo","activeStore","handleClick","ev","store","setState","currentStore","getCenter","maxLat","minLat","maxLong","minLong","i","length","coords","lat","lng","latitude","longitude","componentDidMount","get","params","units","id","appid","then","response","data","list","cityWeathers","map","city","name","temp","main","coord","lon","tempMin","temp_min","tempMax","temp_max","pressure","humidity","description","weather","windSpeed","wind","speed","icon","render","key","index","Math","ceil","floor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport GoogleMap from 'google-map-react';\nimport CityInfo from './CityInfo';\nimport axios from 'axios';\nimport DetailedWeather from './DetailedWeather';\n\nclass App extends React.Component{\n  state = {\n    center: {},\n    stores: [],\n    showInfo: false,\n    activeStore: {}\n  }\n  \n  getCenter(){\n    const stores = this.state.stores;\n    var maxLat = 0;\n    var minLat = 100;\n    var maxLong = 0;\n    var minLong = 100;\n    \n    for (let i = 0; i<stores.length; i++){\n      if (stores[i].coords.lat > maxLat){\n        maxLat = stores[i].coords.lat;\n      }else if(stores[i].coords.lat < minLat){\n        minLat = stores[i].coords.lat;\n      }\n\n      if (stores[i].coords.lng > maxLong){\n        maxLong = stores[i].coords.lng;\n      }else if(stores[i].coords.lng < minLong){\n        minLong = stores[i].coords.lng;\n      }\n    }\n\n    var latitude = (maxLat + minLat) / 2.0;\n    var longitude = (maxLong + minLong) / 2.0;\n\n    this.setState({\n      center: {lat: latitude, lng: longitude}\n    })\n  } \n\n  componentDidMount(){\n    axios.get(\"http://api.openweathermap.org/data/2.5/group\", {\n     params: {\n      units: \"metric\",\n      id: \"6113365,5932311,6180144,5936286,5955902,6162949,6121621\",\n      appid: \"d768b86ac2b5b13b09964365eb5f0128\"\n     }\n    }).then(response => {\n      var data = response.data.list;\n      const cityWeathers = data.map(city => {\n        return (\n          {\n            name: city.name,\n            temp: city.main.temp,\n            coords: {lat: city.coord.lat, lng: city.coord.lon},\n            tempMin: city.main.temp_min,\n            tempMax: city.main.temp_max,\n            pressure: city.main.pressure,\n            humidity: city.main.humidity,\n            description: city.weather[0].description,\n            windSpeed: city.wind.speed,\n            icon: \"http://openweathermap.org/img/wn/\"+city.weather[0].icon+\".png\"\n          }\n        );\n      });\n      this.setState({\n        stores: cityWeathers\n      });\n\n      this.getCenter();\n    });\n  }\n\n  handleClick = (ev, store) => {\n    //const city = ev.target.parentElement.querySelector('.cityName').innerHTML;\n    this.setState({\n      currentStore: store,\n      showInfo: true\n    })\n\n  }\n\n  render(){\n    return (\n      <div className=\"app\">\n       <GoogleMap\n        bootstrapURLKeys={{ key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'}}\n        defaultCenter={{lat: 54.0562, lng: -124.7414}}\n        defaultZoom={5.4} \n        center={{lat: this.state.center.lat, lng: this.state.center.lng}}\n      >\n          {this.state.stores.map((store, index) => {\n              const latitude = store.coords.lat;\n              return (\n                <CityInfo \n                  key={index} \n                  lat={Math.ceil(latitude)} \n                  lng={Math.floor(store.coords.lng)} \n                  store={store}\n                  cn={(latitude > this.state.center.lat)?'dropdown':'dropup'}\n                />\n              );\n            })\n          }\n        </GoogleMap>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}