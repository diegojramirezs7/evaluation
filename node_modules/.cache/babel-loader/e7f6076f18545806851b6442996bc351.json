{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/speedline/proto/src/App.js\";\nimport React from 'react';\nimport GoogleMap from 'google-map-react';\nimport CityInfo from './CityInfo';\nimport axios from 'axios';\nimport Header from './Header';\nimport InfoTable from './InfoTable';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      center: {},\n      stores: [],\n      showInfo: false,\n      activeStore: {}\n    };\n\n    this.handleClick = () => {\n      //display/hide info table\n      this.setState({\n        showInfo: !this.state.showInfo\n      });\n    };\n  }\n\n  getCenter() {\n    // get the center of the map by getting midpoint of northernmost/southernmost cities\n    // and easternmost/westernmost cities\n    const stores = this.state.stores;\n    var maxLat = 0;\n    var minLat = 100;\n    var maxLong = -300;\n    var minLong = +300;\n\n    for (let i = 0; i < stores.length; i++) {\n      if (stores[i].coords.lat > maxLat) {\n        maxLat = stores[i].coords.lat;\n      } else if (stores[i].coords.lat < minLat) {\n        minLat = stores[i].coords.lat;\n      }\n\n      if (stores[i].coords.lng > maxLong) {\n        maxLong = stores[i].coords.lng;\n      } else if (stores[i].coords.lng < minLong) {\n        minLong = stores[i].coords.lng;\n      }\n    }\n\n    var latitude = (maxLat + minLat) / 2.0;\n    var longitude = (maxLong + minLong) / 2.0;\n    this.setState({\n      center: {\n        lat: latitude,\n        lng: longitude\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.getCities(); //update every half hour\n\n    let half_hour = 1000 * 60 * 30;\n    this.intervalId = setInterval(this.getCities.bind(this), half_hour);\n  }\n\n  componentWillUnmount() {\n    //if component is not there, no need to fetch the data\n    clearInterval(this.intervalID);\n  }\n\n  getCities() {\n    var city_ids = \"6113365,5932311,6180144,5936286,5955902,6162949,6121621\"; //fetch data from openWeatherMap API\n\n    axios.get(\"http://api.openweathermap.org/data/2.5/group\", {\n      params: {\n        units: \"metric\",\n        id: city_ids,\n        appid: \"d768b86ac2b5b13b09964365eb5f0128\"\n      }\n    }).then(response => {\n      var data = response.data.list;\n      const cityWeathers = data.map(city => {\n        return {\n          name: city.name,\n          temp: city.main.temp,\n          coords: {\n            lat: city.coord.lat,\n            lng: city.coord.lon\n          },\n          tempMin: city.main.temp_min,\n          tempMax: city.main.temp_max,\n          pressure: city.main.pressure,\n          humidity: city.main.humidity,\n          description: city.weather[0].description,\n          windSpeed: city.wind.speed,\n          icon: \"http://openweathermap.org/img/wn/\" + city.weather[0].icon + \".png\"\n        };\n      });\n      this.setState({\n        stores: cityWeathers\n      });\n      this.getCenter();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      showAllInfo: this.handleClick,\n      showInfo: this.state.showInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMap, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'\n      },\n      defaultCenter: {\n        lat: 54.0562,\n        lng: -124.7414\n      },\n      defaultZoom: 5.4,\n      center: {\n        lat: this.state.center.lat,\n        lng: this.state.center.lng\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 10\n      }\n    }, this.state.stores.map((store, index) => {\n      const latitude = store.coords.lat;\n      return /*#__PURE__*/React.createElement(CityInfo, {\n        key: index,\n        lat: Math.ceil(latitude),\n        lng: Math.floor(store.coords.lng),\n        store: store,\n        cn: latitude > this.state.center.lat ? 'dropdown' : 'dropup',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }\n      });\n    })), this.state.showInfo && /*#__PURE__*/React.createElement(InfoTable, {\n      stores: this.state.stores,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/speedline/proto/src/App.js"],"names":["React","GoogleMap","CityInfo","axios","Header","InfoTable","App","Component","state","center","stores","showInfo","activeStore","handleClick","setState","getCenter","maxLat","minLat","maxLong","minLong","i","length","coords","lat","lng","latitude","longitude","componentDidMount","getCities","half_hour","intervalId","setInterval","bind","componentWillUnmount","clearInterval","intervalID","city_ids","get","params","units","id","appid","then","response","data","list","cityWeathers","map","city","name","temp","main","coord","lon","tempMin","temp_min","tempMax","temp_max","pressure","humidity","description","weather","windSpeed","wind","speed","icon","render","key","store","index","Math","ceil","floor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport GoogleMap from 'google-map-react';\nimport CityInfo from './CityInfo';\nimport axios from 'axios';\nimport Header from './Header';\nimport InfoTable from './InfoTable';\n\nclass App extends React.Component{\n  state = {\n    center: {},\n    stores: [],\n    showInfo: false,\n    activeStore: {}\n  }\n\n  intervalId;\n  \n  getCenter(){\n    // get the center of the map by getting midpoint of northernmost/southernmost cities\n    // and easternmost/westernmost cities\n    const stores = this.state.stores;\n    var maxLat = 0;\n    var minLat = 100;\n    var maxLong = -300;\n    var minLong = +300;\n    \n    for (let i = 0; i<stores.length; i++){\n      if (stores[i].coords.lat > maxLat){\n        maxLat = stores[i].coords.lat;\n      }else if(stores[i].coords.lat < minLat){\n        minLat = stores[i].coords.lat;\n      }\n\n      if (stores[i].coords.lng > maxLong){\n        maxLong = stores[i].coords.lng;\n      }else if(stores[i].coords.lng < minLong){\n        minLong = stores[i].coords.lng;\n      }\n    }\n\n    var latitude = (maxLat + minLat) / 2.0;\n    var longitude = (maxLong + minLong) / 2.0;\n\n    this.setState({\n      center: {lat: latitude, lng: longitude}\n    })\n  } \n\n  componentDidMount(){\n    this.getCities();\n\n    //update every half hour\n    let half_hour = 1000*60*30\n    this.intervalId = setInterval(this.getCities.bind(this), half_hour)\n  }\n\n\n  componentWillUnmount(){\n    //if component is not there, no need to fetch the data\n    clearInterval(this.intervalID);\n  }\n\n\n  getCities(){\n    var city_ids = \"6113365,5932311,6180144,5936286,5955902,6162949,6121621\";\n    //fetch data from openWeatherMap API\n    axios.get(\"http://api.openweathermap.org/data/2.5/group\", {\n     params: {\n      units: \"metric\",\n      id: city_ids,\n      appid: \"d768b86ac2b5b13b09964365eb5f0128\"\n     }\n    }).then(response => {\n      var data = response.data.list;\n      const cityWeathers = data.map(city => {\n        return (\n          {\n            name: city.name,\n            temp: city.main.temp,\n            coords: {lat: city.coord.lat, lng: city.coord.lon},\n            tempMin: city.main.temp_min,\n            tempMax: city.main.temp_max,\n            pressure: city.main.pressure,\n            humidity: city.main.humidity,\n            description: city.weather[0].description,\n            windSpeed: city.wind.speed,\n            icon: \"http://openweathermap.org/img/wn/\"+city.weather[0].icon+\".png\"\n          }\n        );\n      });\n      this.setState({\n        stores: cityWeathers\n      });\n\n      this.getCenter();\n    });\n  }\n\n  handleClick = () => {\n    //display/hide info table\n    this.setState({\n      showInfo: !this.state.showInfo\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        {\n          //\n        }\n        <Header \n          showAllInfo={this.handleClick}\n          showInfo={this.state.showInfo}\n        />\n        <div className=\"app\">\n         <GoogleMap\n          bootstrapURLKeys={{ key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'}}\n          defaultCenter={{lat: 54.0562, lng: -124.7414}}\n          defaultZoom={5.4} \n          center={{lat: this.state.center.lat, lng: this.state.center.lng}}\n        >\n\n            {\n              //for every store, show it on the map with the appropriate info\n            }\n            {this.state.stores.map((store, index) => {\n                const latitude = store.coords.lat;\n                return (\n                  <CityInfo \n                    key={index} \n                    lat={Math.ceil(latitude)} \n                    lng={Math.floor(store.coords.lng)} \n                    store={store}\n                    cn={(latitude > this.state.center.lat)?'dropdown':'dropup'}\n                  />\n                );\n              })\n            }\n\n          </GoogleMap>\n          \n          {\n            //show/hide detailed info table when user clicks button on the header\n          }\n\n          {this.state.showInfo && \n            <InfoTable \n              stores={this.state.stores}\n            />\n          }\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}