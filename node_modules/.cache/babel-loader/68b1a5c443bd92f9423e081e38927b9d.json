{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/speedline/proto/src/App.js\";\nimport React from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showInfoWindow: false,\n      //hide/show infowindow\n      mapLoaded: false,\n      center: {},\n      stores: [{\n        city: \"Dease Lake\",\n        lat: 58.4374,\n        lng: -129.9994\n      }, {\n        city: \"Fort Nelson\",\n        lat: 58.8050,\n        lng: -122.6972\n      }, {\n        city: \"Terrace\",\n        lat: 54.5182,\n        lng: -128.6032\n      }, {\n        city: \"Prince George\",\n        lat: 53.9171,\n        lng: -122.7497\n      }, {\n        city: \"Whistler\",\n        lat: 50.1163,\n        lng: -122.9574\n      }, {\n        city: \"Revelstoke\",\n        lat: 50.9981,\n        lng: -118.1957\n      }, {\n        city: \"Creston\",\n        lat: 49.5,\n        lng: -116.5135\n      }]\n    };\n  }\n\n  getCenter() {\n    const stores = this.state.stores;\n    var latitude = 0;\n    var longitude = 0;\n\n    for (let i = 0; i < stores.length; i++) {\n      latitude += stores[i].lat;\n      longitude += stores[i].lng;\n    }\n\n    latitude = latitude / stores.length;\n    longitude = longitude / stores.length;\n    this.setState({\n      center: {\n        lat: latitude,\n        lng: longitude\n      }\n    });\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        height: '70vh',\n        width: '60vw',\n        margin: '2px auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'\n      },\n      defaultCenter: {\n        lat: 54.0562,\n        lng: -124.7414\n      },\n      defaultZoom: 5.4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 8\n      }\n    }, this.state.stores.map((store, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        lat: Math.ceil(store.lat),\n        lng: store.lng,\n        style: {\n          display: 'inline-block',\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 20\n        }\n      }, \" \", store.city, \" \"), /*#__PURE__*/React.createElement(\"img\", {\n        src: \"./icons/raining.png\",\n        alt: \"icon\",\n        style: {\n          width: '3.4vw',\n          height: '4.3vh',\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 19\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontSize: '1.2em'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 19\n        }\n      }, \"14\\xB0\"));\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/speedline/proto/src/App.js"],"names":["React","GoogleMapReact","App","Component","state","showInfoWindow","mapLoaded","center","stores","city","lat","lng","getCenter","latitude","longitude","i","length","setState","componentDidMount","render","height","width","margin","key","map","store","index","Math","ceil","display","textAlign","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nclass App extends React.Component{\n  state = {\n    showInfoWindow: false, //hide/show infowindow\n    mapLoaded: false,\n    center: {},\n    stores: [\n      {city: \"Dease Lake\", lat: 58.4374, lng: -129.9994},\n      {city: \"Fort Nelson\", lat: 58.8050, lng: -122.6972},\n      {city: \"Terrace\", lat: 54.5182, lng: -128.6032},\n      {city: \"Prince George\", lat: 53.9171, lng: -122.7497},\n      {city: \"Whistler\", lat: 50.1163, lng: -122.9574},\n      {city: \"Revelstoke\", lat: 50.9981, lng: -118.1957},\n      {city: \"Creston\", lat: 49.5, lng: -116.5135}\n    ]\n  }\n  \n  getCenter(){\n    const stores = this.state.stores;\n    var latitude = 0;\n    var longitude = 0;\n    for (let i = 0; i<stores.length; i++){\n      latitude += stores[i].lat;\n      longitude += stores[i].lng;\n    }\n\n    latitude = latitude / stores.length;\n    longitude = longitude / stores.length;\n    this.setState({\n      center: {lat: latitude, lng: longitude}\n    })\n  } \n\n  componentDidMount(){\n\n  }\n\n  render(){\n    return (\n      <div className=\"App\" style={{height: '70vh', width: '60vw', margin: '2px auto'}}>\n       <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'}}\n        defaultCenter={{lat: 54.0562, lng: -124.7414}}\n        defaultZoom={5.4} >\n\n        {this.state.stores.map((store, index) => {\n            return (\n              <div key={index} lat={Math.ceil(store.lat)} lng={store.lng} \n              style={{display: 'inline-block', textAlign: 'center'}}\n              >\n                   <span> {store.city} </span>\n                  <img src=\"./icons/raining.png\" alt=\"icon\" style={{width: '3.4vw', height: '4.3vh', \n                  display: 'inline-block'}}/> \n                 \n                  <span style={{fontSize: '1.2em'}}>\n                    14&deg;\n                  </span>\n              </div>\n            );\n          })\n        }\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}