{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/speedline/proto/src/App.js\";\nimport React from 'react';\nimport GoogleMap from 'google-map-react';\nimport CityInfo from './CityInfo';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      center: {},\n      stores: [{\n        city: \"Dease Lake\",\n        lat: 58.4374,\n        lng: -129.9994\n      }, {\n        city: \"Fort Nelson\",\n        lat: 58.8050,\n        lng: -122.6972\n      }, {\n        city: \"Terrace\",\n        lat: 54.5182,\n        lng: -128.6032\n      }, {\n        city: \"Prince George\",\n        lat: 53.9171,\n        lng: -122.7497\n      }, {\n        city: \"Whistler\",\n        lat: 50.1163,\n        lng: -122.9574\n      }, {\n        city: \"Revelstoke\",\n        lat: 50.9981,\n        lng: -118.1957\n      }, {\n        city: \"Creston\",\n        lat: 49.5,\n        lng: -116.5135\n      }],\n      locations: [{\n        name: \"Dease Lake\",\n        coords: {\n          lat: 58.4374,\n          lng: -129.9994\n        },\n        weather: {}\n      }]\n    };\n  }\n\n  getCenter() {\n    const stores = this.state.stores;\n    var latitude = 0;\n    var longitude = 0;\n\n    for (let i = 0; i < stores.length; i++) {\n      latitude += stores[i].lat;\n      longitude += stores[i].lng;\n    }\n\n    latitude = latitude / stores.length;\n    longitude = longitude / stores.length;\n    this.setState({\n      center: {\n        lat: latitude,\n        lng: longitude\n      }\n    });\n  }\n\n  componentDidMount() {\n    axios.get(\"http://api.openweathermap.org/data/2.5/group\", {\n      params: {\n        units: \"metric\",\n        id: \"6113365,5932311,6180144,5936286,5955902,6162949,6121621\",\n        appid: \"d768b86ac2b5b13b09964365eb5f0128\"\n      }\n    }).then(response => {\n      var data = response.data.list; //http://openweathermap.org/img/wn/11n.png\n\n      const cityWeathers = data.map(city => {\n        return {\n          temp: city.main.temp,\n          tempMin: city.main.temp_min,\n          tempMax: city.main.temp_max,\n          pressure: city.main.pressure,\n          humidity: city.main.humidity,\n          windSpeed: city.wind.speed\n        };\n      });\n      console.log(cityWeathers);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        height: '70vh',\n        width: '60vw',\n        margin: '2px auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(GoogleMap, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'\n      },\n      defaultCenter: {\n        lat: 54.0562,\n        lng: -124.7414\n      },\n      defaultZoom: 5.4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 8\n      }\n    }, this.state.stores.map((store, index) => {\n      return /*#__PURE__*/React.createElement(CityInfo, {\n        key: index,\n        lat: Math.ceil(store.lat),\n        lng: store.lng,\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      });\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/speedline/proto/src/App.js"],"names":["React","GoogleMap","CityInfo","axios","App","Component","state","center","stores","city","lat","lng","locations","name","coords","weather","getCenter","latitude","longitude","i","length","setState","componentDidMount","get","params","units","id","appid","then","response","data","list","cityWeathers","map","temp","main","tempMin","temp_min","tempMax","temp_max","pressure","humidity","windSpeed","wind","speed","console","log","render","height","width","margin","key","store","index","Math","ceil"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAC/BC,KAD+B,GACvB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,MAAM,EAAE,CACN;AAACC,QAAAA,IAAI,EAAE,YAAP;AAAqBC,QAAAA,GAAG,EAAE,OAA1B;AAAmCC,QAAAA,GAAG,EAAE,CAAC;AAAzC,OADM,EAEN;AAACF,QAAAA,IAAI,EAAE,aAAP;AAAsBC,QAAAA,GAAG,EAAE,OAA3B;AAAoCC,QAAAA,GAAG,EAAE,CAAC;AAA1C,OAFM,EAGN;AAACF,QAAAA,IAAI,EAAE,SAAP;AAAkBC,QAAAA,GAAG,EAAE,OAAvB;AAAgCC,QAAAA,GAAG,EAAE,CAAC;AAAtC,OAHM,EAIN;AAACF,QAAAA,IAAI,EAAE,eAAP;AAAwBC,QAAAA,GAAG,EAAE,OAA7B;AAAsCC,QAAAA,GAAG,EAAE,CAAC;AAA5C,OAJM,EAKN;AAACF,QAAAA,IAAI,EAAE,UAAP;AAAmBC,QAAAA,GAAG,EAAE,OAAxB;AAAiCC,QAAAA,GAAG,EAAE,CAAC;AAAvC,OALM,EAMN;AAACF,QAAAA,IAAI,EAAE,YAAP;AAAqBC,QAAAA,GAAG,EAAE,OAA1B;AAAmCC,QAAAA,GAAG,EAAE,CAAC;AAAzC,OANM,EAON;AAACF,QAAAA,IAAI,EAAE,SAAP;AAAkBC,QAAAA,GAAG,EAAE,IAAvB;AAA6BC,QAAAA,GAAG,EAAE,CAAC;AAAnC,OAPM,CAFF;AAaNC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,IAAI,EAAE,YADR;AAEEC,QAAAA,MAAM,EAAE;AAACJ,UAAAA,GAAG,EAAE,OAAN;AAAeC,UAAAA,GAAG,EAAE,CAAC;AAArB,SAFV;AAGEI,QAAAA,OAAO,EAAE;AAHX,OADS;AAbL,KADuB;AAAA;;AAuB/BC,EAAAA,SAAS,GAAE;AACT,UAAMR,MAAM,GAAG,KAAKF,KAAL,CAAWE,MAA1B;AACA,QAAIS,QAAQ,GAAG,CAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACX,MAAM,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACnCF,MAAAA,QAAQ,IAAIT,MAAM,CAACW,CAAD,CAAN,CAAUT,GAAtB;AACAQ,MAAAA,SAAS,IAAIV,MAAM,CAACW,CAAD,CAAN,CAAUR,GAAvB;AACD;;AAEDM,IAAAA,QAAQ,GAAGA,QAAQ,GAAGT,MAAM,CAACY,MAA7B;AACAF,IAAAA,SAAS,GAAGA,SAAS,GAAGV,MAAM,CAACY,MAA/B;AACA,SAAKC,QAAL,CAAc;AACZd,MAAAA,MAAM,EAAE;AAACG,QAAAA,GAAG,EAAEO,QAAN;AAAgBN,QAAAA,GAAG,EAAEO;AAArB;AADI,KAAd;AAGD;;AAEDI,EAAAA,iBAAiB,GAAE;AACjBnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,8CAAV,EAA0D;AACzDC,MAAAA,MAAM,EAAE;AACPC,QAAAA,KAAK,EAAE,QADA;AAEPC,QAAAA,EAAE,EAAE,yDAFG;AAGPC,QAAAA,KAAK,EAAE;AAHA;AADiD,KAA1D,EAMGC,IANH,CAMQC,QAAQ,IAAI;AAClB,UAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcC,IAAzB,CADkB,CAElB;;AACA,YAAMC,YAAY,GAAGF,IAAI,CAACG,GAAL,CAASxB,IAAI,IAAI;AACpC,eACE;AACEyB,UAAAA,IAAI,EAAEzB,IAAI,CAAC0B,IAAL,CAAUD,IADlB;AAEEE,UAAAA,OAAO,EAAE3B,IAAI,CAAC0B,IAAL,CAAUE,QAFrB;AAGEC,UAAAA,OAAO,EAAE7B,IAAI,CAAC0B,IAAL,CAAUI,QAHrB;AAIEC,UAAAA,QAAQ,EAAE/B,IAAI,CAAC0B,IAAL,CAAUK,QAJtB;AAKEC,UAAAA,QAAQ,EAAEhC,IAAI,CAAC0B,IAAL,CAAUM,QALtB;AAOEC,UAAAA,SAAS,EAAEjC,IAAI,CAACkC,IAAL,CAAUC;AAPvB,SADF;AAYD,OAboB,CAArB;AAeAC,MAAAA,OAAO,CAACC,GAAR,CAAYd,YAAZ;AACD,KAzBD;AA0BD;;AAEDe,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,KAAK,EAAE,MAAxB;AAAgCC,QAAAA,MAAM,EAAE;AAAxC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,SAAD;AACC,MAAA,gBAAgB,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAP,OADnB;AAEC,MAAA,aAAa,EAAE;AAACzC,QAAAA,GAAG,EAAE,OAAN;AAAeC,QAAAA,GAAG,EAAE,CAAC;AAArB,OAFhB;AAGC,MAAA,WAAW,EAAE,GAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,KAAKL,KAAL,CAAWE,MAAX,CAAkByB,GAAlB,CAAsB,CAACmB,KAAD,EAAQC,KAAR,KAAkB;AACrC,0BACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAEA,KADP;AAEE,QAAA,GAAG,EAAEC,IAAI,CAACC,IAAL,CAAUH,KAAK,CAAC1C,GAAhB,CAFP;AAGE,QAAA,GAAG,EAAE0C,KAAK,CAACzC,GAHb;AAIE,QAAA,KAAK,EAAEyC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATF,CALJ,CADD,CADF;AAsBD;;AA3F8B;;AA8FjC,eAAehD,GAAf","sourcesContent":["import React from 'react';\nimport GoogleMap from 'google-map-react';\nimport CityInfo from './CityInfo';\nimport axios from 'axios';\n\nclass App extends React.Component{\n  state = {\n    center: {},\n    stores: [\n      {city: \"Dease Lake\", lat: 58.4374, lng: -129.9994},\n      {city: \"Fort Nelson\", lat: 58.8050, lng: -122.6972},\n      {city: \"Terrace\", lat: 54.5182, lng: -128.6032},\n      {city: \"Prince George\", lat: 53.9171, lng: -122.7497},\n      {city: \"Whistler\", lat: 50.1163, lng: -122.9574},\n      {city: \"Revelstoke\", lat: 50.9981, lng: -118.1957},\n      {city: \"Creston\", lat: 49.5, lng: -116.5135}\n    ],\n\n\n    locations: [\n      {\n        name: \"Dease Lake\",\n        coords: {lat: 58.4374, lng: -129.9994},\n        weather: {}\n      }\n    ]\n  }\n  \n  getCenter(){\n    const stores = this.state.stores;\n    var latitude = 0;\n    var longitude = 0;\n    for (let i = 0; i<stores.length; i++){\n      latitude += stores[i].lat;\n      longitude += stores[i].lng;\n    }\n\n    latitude = latitude / stores.length;\n    longitude = longitude / stores.length;\n    this.setState({\n      center: {lat: latitude, lng: longitude}\n    })\n  } \n\n  componentDidMount(){\n    axios.get(\"http://api.openweathermap.org/data/2.5/group\", {\n     params: {\n      units: \"metric\",\n      id: \"6113365,5932311,6180144,5936286,5955902,6162949,6121621\",\n      appid: \"d768b86ac2b5b13b09964365eb5f0128\"\n     }\n    }).then(response => {\n      var data = response.data.list;\n      //http://openweathermap.org/img/wn/11n.png\n      const cityWeathers = data.map(city => {\n        return (\n          {\n            temp: city.main.temp,\n            tempMin: city.main.temp_min,\n            tempMax: city.main.temp_max,\n            pressure: city.main.pressure,\n            humidity: city.main.humidity,\n            \n            windSpeed: city.wind.speed,\n\n          }\n        );\n      });\n\n      console.log(cityWeathers);\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\" style={{height: '70vh', width: '60vw', margin: '2px auto'}}>\n       <GoogleMap\n        bootstrapURLKeys={{ key: 'AIzaSyDAH-HZXwsL1DwvM7i0p3pPtrwrnzQhUxs'}}\n        defaultCenter={{lat: 54.0562, lng: -124.7414}}\n        defaultZoom={5.4} >\n\n          {this.state.stores.map((store, index) => {\n              return (\n                <CityInfo \n                  key={index} \n                  lat={Math.ceil(store.lat)} \n                  lng={store.lng} \n                  store={store}\n                />\n              );\n            })\n          }\n\n        </GoogleMap>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}